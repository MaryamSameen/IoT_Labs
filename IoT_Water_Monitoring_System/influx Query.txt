from(bucket: "water_level_bucket")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "water_level")
  |> pivot(
    rowKey:["_time"],
    columnKey: ["_field"],
    valueColumn: "_value"
  )
  |> map(fn: (r) => ({
      _time: r._time,
      Day: r.day,
      Level: string(v: r.level) + "%",
      Usage: if r.usageLevel == 0 then "Low" 
            else if r.usageLevel == 1 then "Medium" 
            else "High",
      Status: r.status
    }))
  |> yield(name: "table")